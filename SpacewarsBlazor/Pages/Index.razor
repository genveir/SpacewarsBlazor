@inherits DisposableComponent

@page "/"
@inject IJSRuntime jsRunTime
@inject Player player

<div tabindex="0" @onkeydown="KeyDown" @onkeyup="KeyUp">
    <div class="row align-items-center">
        <div class="col">
            <div class="container-canvas">
                <BECanvas Width="@Game.MaxX" Height="@Game.MaxY" @ref="_canvasReference"></BECanvas>
            </div>
        </div>
    </div>
</div>

@code {
    private SpacewarsCanvasContext _context;

    private bool isConnected = true;

    public override void Dispose() => isConnected = false;

    protected Blazor.Extensions.BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Game.Subscribe(player);

#pragma warning disable CS4014 // I 'want' this method to continue without waiting.
            Task.Run(() => TouchLoop());
#pragma warning restore CS4014

            this._context = await SpacewarsCanvasContext.CreateAsync(player, _canvasReference);

            await jsRunTime.InvokeAsync<object>("subscribeToAnimationLoop", DotNetObjectReference.Create(this));
        }
    }

    private async Task TouchLoop()
    {
        while (isConnected)
        {
            player.Touch();

            await Task.Delay(1000);
        }
    }

    protected void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp") player.Commands.Accelerate = false;
        if (e.Key == "ArrowDown") player.Commands.Decelerate = false;
        if (e.Key == "ArrowLeft") player.Commands.TurnLeft = false;
        if (e.Key == "ArrowRight") player.Commands.TurnRight = false;
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp") player.Commands.Accelerate = true;
        if (e.Key == "ArrowDown") player.Commands.Decelerate = true;
        if (e.Key == "ArrowLeft") player.Commands.TurnLeft = true;
        if (e.Key == "ArrowRight") player.Commands.TurnRight = true;
        if (e.CtrlKey) player.Commands.Fire = true;
    }

    [JSInvokable]
    public async ValueTask RenderFrame(float timeStamp)
    {
        await this._context.RenderFrameAsync();
    }
}
